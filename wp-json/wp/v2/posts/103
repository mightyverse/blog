{"id":103,"date":"2009-09-11T21:39:19","date_gmt":"2009-09-12T02:39:19","guid":{"rendered":"https:\/\/blog.mightyverse.com\/?p=103"},"modified":"2014-06-11T06:30:13","modified_gmt":"2014-06-11T13:30:13","slug":"database-column-limits-and-utf8-strings","status":"publish","type":"post","link":"https:\/\/blog.mightyverse.com\/2009\/09\/database-column-limits-and-utf8-strings\/","title":{"rendered":"database column limits and utf8 strings"},"content":{"rendered":"<p><a href=\"http:\/\/www.rubyfocus.biz\/\">Wolf<\/a> <a href=\"http:\/\/www.ultrasaurus.com\/\">and I<\/a> fixed a bug today where we needed to truncate a string of text that we use internally to annotate the database.\u00a0 Now, the annotation is just for our reference, so we limit it to 50 bytes &#8212; that&#8217;s bytes, mind you, not characters, even though the PostgreSQL database will tell you it is &#8220;character varying(50)&#8221;<\/p>\n<p>We use unicode internally, specifically UTF8, which is a fabulous and widely used standard.\u00a0 However, it does have a challenging property where a character may be 1-4 bytes long. We were frustrated with what we thought ought to be a simple problem of truncating a string so that it would be no more than 50 bytes.\u00a0 The tricky part, of course, was that the 49th byte might actually fall in the middle of a character.<\/p>\n<p>To solve the problem, we added a method to the Rails Multibyte::Chars class, which is part of ActiveSupport.\u00a0 For those who speak Ruby, Rails and RSpec, below is the solution we came up with (first the spec, then the implementation).<\/p>\n<p>The solution we came up with was borrowed from the private translate_offset method.  The key interesting part is that you can discover whether you&#8217;ve chopped up a string in the middle of a character by calling chunk.unpack(&#8216;U*&#8217;) &#8212; the unpack method on String in Ruby will throw an exception when you ask it to interpret the UTF-8 characters as unsigned integers with the &#8220;U&#8221; directive.<\/p>\n<pre>\r\ndescribe \"Chars#limit_bytes\" do\r\n  it 'should return \"\" on \"\"' do\r\n    \"\".mb_chars.limit_bytes(0).should == \"\"\r\n    \"\".mb_chars.limit_bytes(1).should == \"\"\r\n  end\r\n\r\n  it 'should truncate single byte character strings as expected' do\r\n    a = \"abcd\"\r\n    a.mb_chars.limit_bytes(0).should == ''\r\n    a.mb_chars.limit_bytes(1).should == 'a'\r\n    a.mb_chars.limit_bytes(50).should == 'abcd'\r\n  end\r\n\r\n  it 'should truncate multi-byte character strings at character boundaries' do\r\n    k = \"\u3053\u3093\u3044\u3061\u308f\"\r\n    k.mb_chars.limit_bytes(0).should == ''\r\n    k.mb_chars.limit_bytes(1).should == ''\r\n    k.mb_chars.limit_bytes(3).should == '\u3053'\r\n    k.mb_chars.limit_bytes(4).should == '\u3053'\r\n    k.mb_chars.limit_bytes(5).should == '\u3053'\r\n    k.mb_chars.limit_bytes(6).should == '\u3053\u3093'\r\n    k.mb_chars.limit_bytes(7).should == '\u3053\u3093'\r\n    k.mb_chars.limit_bytes(50).should == '\u3053\u3093\u3044\u3061\u308f'\r\n  end\r\nend\r\n\r\nmodule ActiveSupport #:nodoc:\r\n  module Multibyte #:nodoc:\r\n    class Chars\r\n      def limit_bytes(limit)\r\n        limit -= 1 while !valid_boundary?(limit)\r\n        s = @wrapped_string.slice(0,limit)\r\n        s.mb_chars\r\n      end\r\n\r\n      def valid_boundary?(length)\r\n        chunk = @wrapped_string.slice(0,length)\r\n        begin\r\n          chunk.unpack('U*')\r\n          true\r\n        rescue\r\n          false\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n<\/pre>\n<p>We&#8217;ve written this up as a <a href=\"https:\/\/rails.lighthouseapp.com\/projects\/8994\/tickets\/3192-should-be-able-to-truncate-a-multibyte-string-to-a-max-of-bytes\">Lighthouse ticket<\/a> in case the Rails folk want to add it to the platform or if other people developing multi-lingual database apps run into the same challenge and look there. <\/p>\n<p>The above code can be used under the MIT License:<\/p>\n<pre>\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2009 Mightyverse, Inc.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n<\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Wolf and I fixed a bug today where we needed to truncate a string of text that we use internally to annotate the database.\u00a0 Now, the annotation is just for our reference, so we limit it to 50 bytes &#8212; that&#8217;s bytes, mind you, not characters, even though the PostgreSQL database will tell you it [&hellip;]<\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[1],"tags":[],"_links":{"self":[{"href":"https:\/\/blog.mightyverse.com\/wp-json\/wp\/v2\/posts\/103"}],"collection":[{"href":"https:\/\/blog.mightyverse.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/blog.mightyverse.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/blog.mightyverse.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/blog.mightyverse.com\/wp-json\/wp\/v2\/comments?post=103"}],"version-history":[{"count":0,"href":"https:\/\/blog.mightyverse.com\/wp-json\/wp\/v2\/posts\/103\/revisions"}],"wp:attachment":[{"href":"https:\/\/blog.mightyverse.com\/wp-json\/wp\/v2\/media?parent=103"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/blog.mightyverse.com\/wp-json\/wp\/v2\/categories?post=103"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/blog.mightyverse.com\/wp-json\/wp\/v2\/tags?post=103"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}